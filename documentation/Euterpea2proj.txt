-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on Github at
--   <a>https://github.com/githubuser/Euterpea2proj#readme</a>
@package Euterpea2proj
@version 0.1.0.0

module MelodicFunctions
data Progression

-- | Given duration, a, mode and a list of chords (in scale given in a +
--   mode), returns progression. Example: progress hn (Bf,oo 4) Maj
--   [I,IV,V,I] Note: Change tempo by using "tempo r m" (where r - ratio
--   x/60bpm, m - melody).
data Mod

-- | Function wrapping Int into Octave.
oo :: Int -> Octave
heynow :: Music Pitch

-- | Given duration and a (PitchClass,Octave) tuple, returns a Maj chord
--   based on given pitch. Example: accMaj (5/8) (F,oo 2)
accMaj :: Dur -> a -> Music a

-- | Given duration and a, returns a Min chord based on a given pitch.
--   Example: accMin sn (Ds,oo 4)
accMin :: Dur -> a -> Music a

-- | Given duration and a, returns a diminished chord based on a given
--   pitch. Example: accDim qn (Fss,oo 3)
accDim :: Dur -> a -> Music a

-- | Function which creates pseudo-random melody, based on given seed and
--   key. Combines 8 tacts (2/4 measure) of melody, matching (kind of) the
--   progression.
composeMelody :: a -> Int -> Music a

-- | Function which combines random melody with a simple progression
--   (lasting 8 tacts)
composeWhole :: a -> Int -> Music a
run2 :: Music Pitch
